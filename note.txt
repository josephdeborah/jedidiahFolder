<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quiz App</title>
  <link rel="stylesheet" href="style.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div id="quiz-container">
    <h1>Quiz App</h1>
    <div id="quiz-questions">
      <!-- Quiz Questions will be dynamically inserted here -->
    </div>
    <button id="show-scores" style="display: none;">Show Previous Scores</button>
    <button id="next-btn" style="display: none;">Next</button>
  </div>

  <script src="script.js"></script>
</body>
</html>



body {
    font-family: "Poppins", sans-serif;
    background-color: dodgerblue;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
  }
  
  #quiz-container {
    background-color: white;
    position: relative;
    padding: 20px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    text-align: center;
    width: 40rem;
    height: 25rem;
  }
  
  button {
    background: rgba(2, 2, 61, 0.9);
    color: white;
    padding: 10px 10px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 1.1rem;
    font-weight: bold;
  }
  
  button:hover {
    background-color: #45a049;
  }
  
  .question {
    margin: 20px 0;
  }
  
  .answer {
    margin: 10px 0;
    padding: 10px;
    background-color: #eaeaea;
    cursor: pointer;
    border-radius: 5px;
  }
  
  .answer:hover {
    background-color: #dcdcdc;
  }
  
  .correct {
    background-color: rgba(0, 255, 0, 0.2);
  }
  
  .incorrect {
    background-color: rgba(255, 0, 0, 0.2);
  }
  
  .timer {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 10px;
    color: #333;
    position: absolute;
    top: 20px;
    left: 65%;
    background: blue;
    color: white;
    padding: 10px 10px;
    border-radius: 5px;
  }

  #next-btn {
    position: absolute;
    left: 89%;
    bottom: 18px;
    margin-top: 40px;
  }
  


  // Global variables to store user data, questions, and quiz state
let userName = "";
let currentQuestionIndex = 0;
let correctAnswersCount = 0; // Track the number of correct answers
let quizData = [
  {
    question: "What is 2 + 2?",
    answers: ["3", "4", "5", "6"],
    correctAnswer: "4"
  },
  {
    question: "What is the capital of France?",
    answers: ["Berlin", "Madrid", "Paris", "Rome"],
    correctAnswer: "Paris"
  }
];
let previousScores = JSON.parse(localStorage.getItem("scores")) || [];
let timer;
let timeLeft = 30; // Timer for each question (in seconds)
let quizFinished = false; // Track whether the quiz is finished

// Wait for the DOM to be ready
document.addEventListener("DOMContentLoaded", () => {
  // Ask for user name using SweetAlert
  Swal.fire({
    title: "Enter your name",
    input: "text",
    inputPlaceholder: "Your name",
    showCancelButton: false,
    confirmButtonText: "Start Quiz",
  }).then((result) => {
    if (result.isConfirmed && result.value) {
      userName = result.value;
      // Show a welcome message
      Swal.fire({
        title: `Welcome, ${userName}!`,
        text: "Good luck with the array quiz!",
        confirmButtonText: "Start Quiz",
      }).then(() => {
        displayQuestion();
      });
    } else {
      userName = "Guest";
      displayQuestion();
    }
  });

  // Show previous scores
  document.getElementById("show-scores").addEventListener("click", showScores);
});

// Display a question
function displayQuestion() {
  if (quizFinished) return; // Prevent new questions if quiz is finished

  const quizContainer = document.getElementById("quiz-questions");
  quizContainer.innerHTML = ""; // Clear any existing content

  const question = quizData[currentQuestionIndex];

  // Create and display question
  const questionDiv = document.createElement("div");
  questionDiv.classList.add("question");

  const questionTitle = document.createElement("h3");
  questionTitle.textContent = question.question;
  questionDiv.appendChild(questionTitle);

  // Create and display answers
  question.answers.forEach((answer) => {
    const answerDiv = document.createElement("div");
    answerDiv.classList.add("answer");
    answerDiv.textContent = answer;
    answerDiv.addEventListener("click", () => handleAnswerClick(answer));
    questionDiv.appendChild(answerDiv);
  });

  // Create and display timer
  const timerDiv = document.createElement("div");
  timerDiv.classList.add("timer");
  timerDiv.textContent = `Time Left: ${timeLeft} seconds`;
  questionDiv.appendChild(timerDiv);

  quizContainer.appendChild(questionDiv);

  // Start the timer for the current question
  startTimer(timerDiv);

  // Show the Next button
  document.getElementById("next-btn").style.display = "none"; // Hide Next button initially
  document.getElementById("next-btn").addEventListener("click", moveToNextQuestion);
}

// Start the timer for a question
function startTimer(timerDiv) {
  timeLeft = 30; // Reset time to 30 seconds for each question
  timerDiv.textContent = `Time Left: ${timeLeft} seconds`;

  if (timer) clearInterval(timer); // Clear previous timer if any

  timer = setInterval(() => {
    timeLeft--;
    timerDiv.textContent = `Time Left: ${timeLeft} seconds`;

    if (timeLeft <= 0) {
      clearInterval(timer);
      moveToNextQuestion(); // Move to next question when time is up
    }
  }, 1000);
}

// Handle answer click
function handleAnswerClick(selectedAnswer) {
  const question = quizData[currentQuestionIndex];
  const questionDiv = document.getElementsByClassName("question")[0];
  const answers = questionDiv.getElementsByClassName("answer");

  // Disable answers when an answer is selected
  Array.from(answers).forEach((answerDiv) => {
    answerDiv.removeEventListener("click", handleAnswerClick);
    if (answerDiv.textContent === question.correctAnswer) {
      answerDiv.classList.add("correct");
    } else {
      answerDiv.classList.add("incorrect");
    }
  });

  // Increment correct answers count if the answer is correct
  if (selectedAnswer === question.correctAnswer) {
    correctAnswersCount++;
  }

  // Show the "Next" button after an answer is selected
  document.getElementById("next-btn").style.display = "block";
}

// Save score to localStorage
function saveScore(isCorrect) {
  const score = {
    userName: userName,
    question: quizData[currentQuestionIndex].question,
    isCorrect: isCorrect,
    date: new Date().toLocaleString()
  };
  previousScores.push(score);
  localStorage.setItem("scores", JSON.stringify(previousScores));
}

// Move to the next question
function moveToNextQuestion() {
  if (currentQuestionIndex < quizData.length - 1) {
    currentQuestionIndex++;
    displayQuestion();
  } else {
    quizFinished = true; // Set quizFinished to true when quiz ends
    clearInterval(timer); // Stop the timer once the quiz is completed

    // Show final score when quiz is completed
    Swal.fire({
      title: "Quiz Finished!",
      text: `You've completed the quiz! Your score is ${correctAnswersCount} out of ${quizData.length}.`,
      confirmButtonText: "Close",
    });
  }
}

// Show previous scores using SweetAlert
function showScores() {
  let scoresMessage = "";
  if (previousScores.length > 0) {
    previousScores.forEach(score => {
      scoresMessage += `${score.userName} - ${score.question}: ${score.isCorrect ? "Correct" : "Incorrect"} (${score.date})\n`;
    });
  } else {
    scoresMessage = "No previous scores available.";
  }

  Swal.fire({
    title: "Previous Scores",
    text: scoresMessage,
    confirmButtonText: "Close",
  });
}



 border: 4px solid #f3f3f3; 
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 2s linear infinite;
    position: fixed; /* Fix it to cover the whole viewport */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 9999; /* Ensure it's above other content */


 @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  



/* HTML: <div class="loader"></div> */
.loader {
  --d:22px;
  width: 4px;
  height: 4px;
  border-radius: 50%;
  color: #25b09b;
  box-shadow: 
    calc(1*var(--d))      calc(0*var(--d))     0 0,
    calc(0.707*var(--d))  calc(0.707*var(--d)) 0 1px,
    calc(0*var(--d))      calc(1*var(--d))     0 2px,
    calc(-0.707*var(--d)) calc(0.707*var(--d)) 0 3px,
    calc(-1*var(--d))     calc(0*var(--d))     0 4px,
    calc(-0.707*var(--d)) calc(-0.707*var(--d))0 5px,
    calc(0*var(--d))      calc(-1*var(--d))    0 6px;
  animation: l27 1s infinite steps(8);
}
@keyframes l27 {
  100% {transform: rotate(1turn)}
}






`Time Left: ${timeLeft} seconds`